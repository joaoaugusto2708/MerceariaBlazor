@page "/vendas"
@using Mercearia.UI.Client.Models
@using Mercearia.UI.Client.Helpers
@using System.Net.Http
@using System.Text.Json
@inject Api api
<PageTitle>Lista de Vendas</PageTitle>


<style>
    .text-center {
        text-align: center;
        margin-top: 20px;
        margin-bottom: 40px; 
    }

    .paraf {
        margin-top: 20px;
        margin-bottom: 30px;
    }
</style>

<h1 class="text-center">Relatório de Vendas</h1>

<p class="paraf">Bem-vindo ao seu espaço para gerenciamento de vendas! Aqui você pode visualizar e gerenciar todas as vendas realizadas.</p>

<div class="mb-3">
    <InputText @bind-Value="searchTerm" Placeholder="Pesquisar por ID da venda ou forma de pagamento" class="form-control" @oninput="SearchVendas" />
</div>

<AdicionarVenda/>
@if (vendas == null)
{
    <div class="d-flex justify-content-center">
        <strong role="status">Loading...</strong>
        <Spinner Type="SpinnerType.Border" Class="ms-auto" />
    </div>
}
else
{
    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>ID Venda</TableHeaderCell>
                <TableHeaderCell>Forma de Pagamento</TableHeaderCell>
                <TableHeaderCell>Valor da Venda</TableHeaderCell>
                <TableHeaderCell>Produtos da venda</TableHeaderCell>
                <TableHeaderCell>Excluir Venda</TableHeaderCell>
                <TableHeaderCell>Ver Detalhes</TableHeaderCell>
                <TableHeaderCell>Editar Venda</TableHeaderCell>
                <TableHeaderCell>Ver Produtos</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var venda in filteredVendas)
            {
                <TableRow>
                    <TableRowHeader>@venda.NumVenda</TableRowHeader>
                    <TableRowCell>@venda.FormaPagamento</TableRowCell>
                    <TableRowCell>@venda.ValorVenda</TableRowCell>
                    <TableRowCell>@venda.Produtos.Count()</TableRowCell>
                    <TableRowCell> <Button Color="Color.Danger" Clicked="() => ExcluirVenda(venda.Id)"><Blazorise.Icon Name="FontAwesomeIcons.Trash" /></Button></TableRowCell>
                    <TableRowCell><VerIndividualVenda vendaSelec = "@venda.Id"/></TableRowCell>
                    <TableRowCell><AlterarVenda vendaId ="@venda.Id" /></TableRowCell>
                    <TableRowCell><VerProdutos vendaIdProduto ="@venda.Id" /></TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
}

@code {
    private IList<Venda>? vendas { get; set; }
    private IList<Venda>? filteredVendas { get; set; }
    private string searchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        vendas = await api.GetAsync<Venda>("/api/Venda");
        filteredVendas = vendas;
    }

    private async Task ExcluirVenda(string vendaId)
    {
        try
        {
            await api.DeleteAsync("/api/Venda", vendaId);
            vendas = await api.GetAsync<Venda>("/api/Venda");
            FilterVendas();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao excluir a venda: {ex.Message}");
        }
    }

    private void SearchVendas(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterVendas();
    }

    private void FilterVendas()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredVendas = vendas;
        }
        else
        {
            filteredVendas = vendas?.Where(v =>
                v.NumVenda.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                v.FormaPagamento.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
