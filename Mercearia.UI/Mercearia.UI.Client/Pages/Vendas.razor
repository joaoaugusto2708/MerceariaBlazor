@page "/vendas"
@using Mercearia.UI.Client.Models
@using Mercearia.UI.Client.Helpers
@using System.Net.Http
@using System.Text.Json
@inject Api api
<PageTitle>Lista de Vendas</PageTitle>

@if (vendas == null)
{
    <div class="d-flex justify-content-center">
        <strong role="status">Loading...</strong>
        <Spinner Type="SpinnerType.Border" Class="ms-auto" />
    </div>
}
else
{
    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Forma de Pagamento</TableHeaderCell>
                <TableHeaderCell>Valor da Venda</TableHeaderCell>
                <TableHeaderCell>Produtos da venda</TableHeaderCell>
                <TableHeaderCell>Ver Produtos</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var venda in vendas)
            {
                <TableRow>
                    <TableRowHeader>@venda.NumVenda</TableRowHeader>
                    <TableRowCell>@venda.FormaPagamento</TableRowCell>
                    <TableRowCell>@venda.ValorVenda</TableRowCell>
                    <TableRowCell>@venda.Produtos.Count()</TableRowCell>
                    <TableRowCell><Modal></Modal></TableRowCell>
                    
                </TableRow>
            }

        </TableBody>
    </Table>
}

<Button Color="Color.Primary" Clicked="@ShowModal">Adicionar Produto</Button>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Formulário de Venda</ModalTitle>
            <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
            <Field>

                <FieldLabel> Primary Classification:</FieldLabel>

                <InputSelect @bind-Value="produtoIdSelecionado">
                    @foreach (var produto in produtos)
                    {
                        <option value="@produto.Id">@produto.Nome</option>


                    }
                
                </InputSelect>
                @if (produtoIdSelecionado != null)
                {
                    AdicionarProduto(produtoIdSelecionado);
                }
            </Field>
            <Field>
                <FieldLabel>Valor da Venda:</FieldLabel>
                <NumericEdit @bind-Value="venda.ValorVenda" Format="N2" />
            </Field>
            <Field>
                <FieldLabel>Forma de Pagamento:</FieldLabel>
                <TextEdit @bind-Value="venda.FormaPagamento" />
            </Field>

            <Table Bordered>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>#</TableHeaderCell>
                        <TableHeaderCell>Nome Produto</TableHeaderCell>
                        <TableHeaderCell>Desc Produto</TableHeaderCell>
                        <TableHeaderCell>Preço produto</TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var prodSelec in produtosSelecionados)
                    {
                        <TableRow>
                            <TableRowHeader>@prodSelec.NumProduto</TableRowHeader>
                            <TableRowCell>@prodSelec.Nome</TableRowCell>
                            <TableRowCell>@prodSelec.Descricao</TableRowCell>
                            <TableRowCell>@prodSelec.Preco</TableRowCell>
                        </TableRow>

                    }
                    
                </TableBody>
            </Table>

        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Fechar</Button>
            <Button Color="Color.Primary" Clicked="@SalvarProduto">Realizar Venda!</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    private string produtoIdSelecionado { get; set; }
    private IList<Venda>? vendas { get; set; }
    private IList<Produto>? produtos { get; set; }
    private List<Produto> produtosSelecionados = new List<Produto>();
    protected override async Task OnInitializedAsync()
    {
        vendas = await api.GetAsync<Venda>("/api/Venda");
        produtos = await api.GetAsync<Produto>("/api/Produto");

    }

   

    private Modal modalRef;
    private Venda venda = new Venda();

    private Task ShowModal()
    {
        venda = new Venda();
        return modalRef.Show();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await api.PostAsync("/api/Venda", venda);
            if (result != null)
            {
                Console.WriteLine("Venda feita com sucesso!");
            }
            await HideModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao adicionar o produto: {ex.Message}");
        }
    }

    private void AdicionarProduto(string? produtoId)
    {
        var produto = produtos.FirstOrDefault(p => p.Id == produtoId);
        if (produto != null && !produtosSelecionados.Contains(produto))
        {
            produtosSelecionados.Add(produto);
        }
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task SalvarProduto()
    {
        await HandleValidSubmit();
    }
}